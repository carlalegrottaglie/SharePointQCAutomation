package com.crear.automatizacion;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class SharePointAutomation {
    public static void main(String[] args) {
        // Configurar ChromeDriver
        System.setProperty("webdriver.chrome.driver", "C:\\ProgramData\\chromedriver-win64\\chromedriver.exe");

        WebDriver driver = new ChromeDriver();
        boolean primeraApertura = true;

        try (FileInputStream fileInputStream = new FileInputStream(new File("Proyectos.xlsx"));
             XSSFWorkbook workbook = new XSSFWorkbook(fileInputStream)) {

            // Leer la hoja de "Proyectos"
            Sheet sheet = workbook.getSheet("Proyectos");

            // Comenzar desde la segunda fila (índice 1)
            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                if (row == null) continue;  // Saltar filas vacías

                // Leer la columna "Proyecto"
                String proyecto = row.getCell(0).getStringCellValue();
                // Leer la columna "Carpeta"
                String carpeta = row.getCell(10).getStringCellValue();
                LocalDate fechaInicio = row.getCell(4).getLocalDateTimeCellValue().toLocalDate();
                LocalDate fechaFin = row.getCell(5).getLocalDateTimeCellValue().toLocalDate();

                // Navegar a la carpeta en SharePoint
                driver.get(carpeta);

                if (primeraApertura) {
                    // Pausa para permitir el inicio de sesión manual
                    System.out.println("Por favor, inicie sesión en la página SharePoint y presione Enter para continuar...");
                    System.in.read(); // Espera la entrada del usuario
                    primeraApertura = false; // Desactivar la pausa para las siguientes aperturas
                }

                // Esperar a que los archivos estén visibles
                WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
                List<WebElement> archivos = wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector("button[data-automationid='FieldRenderer-name']")));
                System.out.println("NOMBRE DE PROYECTO: " + proyecto);
                // Verificar si la lista está vacía
                if (archivos.isEmpty()) {
                    System.out.println("No se encontraron archivos en la carpeta: " + carpeta);
                } else {
                    Set<String> nombresArchivos = new HashSet<>();
                    for (WebElement archivo : archivos) {
                        String nombreArchivo = archivo.getText();
                        nombresArchivos.add(nombreArchivo);
                        System.out.println("Archivo encontrado: " + nombreArchivo);
                    }

                    // Verificar informes
                    verificarInformes(nombresArchivos, fechaInicio, fechaFin);
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            driver.quit();
        }
    }

    private static void verificarInformes(Set<String> nombresArchivos, LocalDate fechaInicio, LocalDate fechaFin) {
        List<String> patronesInformesEsperados = new ArrayList<>();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM");

        LocalDate fechaActual = fechaInicio.plusMonths(1); // Iniciar desde el mes siguiente
        while (!fechaActual.isAfter(fechaFin)) {
            patronesInformesEsperados.add(fechaActual.format(formatter));
            fechaActual = fechaActual.plusMonths(1);
        }

        List<String> informesPresentesConFormatoCorrecto = new ArrayList<>();
        List<String> informesPresentesConFormatoIncorrecto = new ArrayList<>();
        List<String> informesFaltantes = new ArrayList<>(patronesInformesEsperados);

        for (String nombreArchivo : nombresArchivos) {
            boolean formatoCorrecto = nombreArchivo.startsWith("IA") &&
                    nombreArchivo.matches(".*\\d{4}-\\d{2}.*") &&
                    nombreArchivo.matches(".*v\\d+.*");

            // Extraer el mes y año del nombre del archivo
            String fechaMes = null;
            if (nombreArchivo.matches(".*\\d{4}-\\d{2}.*")) {
                fechaMes = nombreArchivo.replaceAll(".*(\\d{4}-\\d{2}).*", "$1");
            }

            if (fechaMes != null && patronesInformesEsperados.contains(fechaMes)) {
                if (formatoCorrecto) {
                    informesPresentesConFormatoCorrecto.add(nombreArchivo);
                } else {
                    informesPresentesConFormatoIncorrecto.add(nombreArchivo);
                }
                informesFaltantes.remove(fechaMes);
            }
        }

        // Mostrar resultados
        System.out.println("Informes presentes con formato correcto: " + informesPresentesConFormatoCorrecto);
        System.out.println("Informes presentes con formato incorrecto: " + informesPresentesConFormatoIncorrecto);
        System.out.println("Informes faltantes: " + informesFaltantes);
    }
}
